 * 유스 케이스 다이어그램  Use Case Diagram
시스템과 사용자의 상호작용을 다이어그램으로 표현
사용자 관점에서 시스템의 서비스, 기능, 외부 요소를 보여줌

 1. 시스템
 2. 액터
 3. 유스케이스
 4. 관계

 시스템   System
만들고자 하는 프로그램

 액터   Actor
시스템 외부에서
시스템과 상호작용하는 시스템 or 사람
반드시 하나 이상의 유스케이스와 상호작용해야 한다
 1. 사용자 역할
 2. 외부 시스템

 유스케이스   Usecase
사용자 입장에서 본
시스템의 기능 or 시스템의 요구사항 (액터에게 제공해야 하는 기능)
시스템 내에서의 일련의 작업을 수행하기 위한 행위들

 관계   Relationship
액터와 유스케이스 사이의
의미 있는 관계
 1. 연관
  (1) 포함
  (2) 확장
 2. 의존
 3. 일반화


 * 유스케이스 다이어그램의 관계   Relationships in Use Case Diagram
액터와 유스케이스 사이의
의미 있는 관계
 1. 연관
  (1) 포함
  (2) 확장
 2. 의존
 3. 일반화

 연관 관계   Association
유스케이스와 액터 간의
상호 작용이 있다

 포함 관계   Include
한 유스케이스의 실행이
다른 유스케이스의 실행을 전제로 할 때 (반드시 필요할 때)

 확장 관계   Extend
특정 조건에 따라 확장 기능을 수행할 때
선택지라고 생각하자

 일반화 관계
상속 관계를 의미
유사한 유스케이스 or 액터를 모아
추상화한 유스케이스 or 액터와 연결시켜 그룹을 만들어
이해도를 높이기 위한 관계


 * 클래스 다이어그램   Class Diagram
클래스 내부의 구성 요소, 클래스 간의 관계를 도식화하여
특정 모듈, 일부, 전체를 구조화

클래스 간의 의존성 파악에 좋다
의사소통하기도 쉽다

의존 관계가 명확하다

클래스 다이어그램 단계
 1. 개념 단계
 2. 명세 단계
 3. 구현 단계

 개념 단계
클래스만 도출하고
관계를 단순화한다

 명세와 구현 단계
개발 직전 설계나
개발 이후 설명 목적으로 사용된다
코드와 연관이 크다
이 다이어그램을 기반으로 코드로 구현

클래스 다이어그램 요소
 1. 클래스
 2. 스트레오 타입
 3. 추상 클래스
 4. 클래스 간 관계

 클래스
 1. 이름
 2. 속성 (변수)
 3. 메소드
이름은 생략 가능하지만
나머지는 생략 불가능하다

 클래스접근 지정자
 1. +   public
 2. -   private
 3. #   protected
 4. ~   default

 클래스 도메인(?)
{read only}는 final을 의미
밑줄은 static
[] 변수에 지정된 사이즈

ex)
+name : string
+func(string) : bool
[*]
ㄴ 사이즈가 정해져 있지 x
[0, 1]
ㄴ 0개이거나 1개이면

 스트레오 타입
길러멧 (guillemet) <<>>을 사용해서
인터 페이스, 추상 클래스, enum을 표현
클래스명 위에 작은 글씨로 표현

 추상 클래스 표현 방법
 1. 기울어진 글씨체
 2. 클래스명 {abstract}
 3. 클래스명 위에 <<abstract>>


 * 클래스 관계   Relationship between Classes
 1. Association
 2. Inheritance
 3. Realization / Implementation
 4. Dependency
 5. Aggregation
 6. Composition

 Association
다른 객체의 참조를 가지고 있을 때
변수로 다른 클래스와 연관이 있을 때
A -> B  // A가 B를 참조한다

 Dependency
메소드의 파라미터나 반환에 사용되는 클래스 관계

 Inheritance
상속 관계
일반화라고도 한다 (Generalization)
자식 -> 부모

 Realization (Implementation)
실체화
인터페이스를 상속해서
실제로 구현할 때
인터페이스를 오버라이딩
구현 클래스 -> 인터페이스

 Aggregation
집약 관계
서로 독립적
전체 객체가 없어져도
부분 객체는 없어지지 x

 Composition
합성 관계
서로 의존적
전체 객체가 없어지면
부분 객체도 없어진다


