 * 디자인 패턴
1995년 Gof(Ganf of Four)라고 불리는
에릭 감마, 리차드 헬름, 랄프 존슨, 존 블리시디스가
처음으로 구체화 및 체계화

수많은 디자인 패턴들 중
가장 일반적인 사례에 적용될 수 있는 패턴들을 분류하여 정리함으로써
지금까지도 소프트웨어 공학이나 현업에서 가장 많이 사용되는 디자인 패턴

디자인 패턴은 총 23개로
생성, 구조, 행위의 3가지로 분류한다


 * 빌더 패턴
빌더 패턴은 
구현부에서 추상층을 분리하여
서로가 독립적으로 확장할 수 있도록 구성한 패턴으로
기능과 구현을 두 개의 별도 클래스로 구현한다


 * 싱글톤
하나의 객체를 생성하면
생성된 객체를 어디서든 참조할 수 있지만
여러 프로세스가 동시에 참조할 수 없는 패턴

불필요한 메모리 낭비를 최소화 ㄱㄴ


 * 방문자  Visitor
각 클래스들의 데이터 구조에서 처리 기능을 분리하여 별도로 구성함으로써
클래스를 수정하지 않고도 새로운 연산의 추가가 가능


 * 프록시  Proxy
복잡한 시스템을 개발하기 쉽도록
클래스나 객체들을 조합하는 패턴에 속하며
대리자라는 이름으로도 불림

내부에서는 객체 간의 복잡한 관계를 단순하게 정리해주고
외부에서는 객체의 세부적인 내용을 숨기는 역할을 함


 * 팩토리 메소드  Factory Method
객체 생성을 서브 클래스에서 처리하도록 분리하여 캡슐화한 패턴으로
상위 클래스에서 인터페이스만 정의하고
실제 생성은 서브 클래스가 담당하며
가상 생성자 (Virtual Constructor) 패턴이라고도 불림


 * 옵저버 패턴
옵저버 패턴은
한 객체의 상태가 변화하면
객체에 상속된 다른 객체들에게 변화된 상태를 전달하는 패턴으로
일대다의 의존성을 정의한다
주로 분산된 시스템 간에
이벤트를 생성, 발행 (publish)하고 이를 수신 (subscribe)할 때 이용한다


 * 행위 패턴

디자인 패턴은 
모듈 간의 관계 및 인터페이스를 설계할 때
참조할 수 있는 전형적인 해결 방식 또는 예제를 의미한다

그 중 행위 패턴은
클래스나 객체들이 서로 상호작용하는 방법이나 책임 분배 방법을 정의하는 패턴으로
Interpreter, Observer, Command 등이 그 예에 해당한다

