 * UML 클래스 다이어그램
클래스 내부 구성요소 및 클래스 간의 관계를 도식화하여
시스템의 특정 모듈 or 일부 및 전체를 구조화한
구조 다이어그램

개발하기 전에 클래스 다이어그램을 그리면
시스템 내 클래스 간의 의존성 파악과
팀원들 간의 의사소통이 편리하다

Unified Modeling Language


 * UML 클래스 다이어그램 단계
 1. 개념
 2. 명세
 3. 구현

 개념 단계
클래스만 도출하고
관계를 단순화하는 것이 목적

 명세와 구현 단계
개발 직전 설계나 구현 이후 설명 목적으로 사용되고
이 다이어그램을 기반으로 코드로 구현하거나
코드를 기반으로 다어이그램을 그리기 때문에
코드와 연관이 깊다


 * UML 클래스 다이어그램 요소
 1. 클래스 
 2. 스트레오 타입
 3. 추상 클래스


 * 클래스
 1. 이름
 2. 속성 (변수)
 3. 메소드
순서대로 나열

변수 앞에는 +, -, #,~ 사용
 1. +은 public
 2. -는 private
 3. #은 protected
 4. ~은 default
를 의미

{readonly}는 final을
밑줄은 static을 의미

[*]나 [0 ... 1]은
지정된 사이즈를 의미
리스트의 경우 사이즈가 정해지지 않으므로 *을 사용

이름은
접근제어자 필드명 :타입
으로 작성

함수는
적븐제어자 메소드명(파라미터타입) : 반환타입
으로 작성

ex)
className
-------------
+field01 : int
#field02 : int
-field03 : int {readonly}
-field04 : List<String> [*]
-field05 : Optional<String> [0..1]
--------------------------------------
+mothod01(String) : bool


 * 스테레오 타입
인터페이스나 추상 클래스 같은 요소를 표현하기 위해
길러멧 (guillemet)을 사용

길러멧은
클래스명 위에 작은 글씨로 <<>> 작성


 * 추상 클래스
 1. 기울어진 글씨로 표현
 2. 클래스 명 뒤에 {abstract} 붙이기
 3. 길러멧 <<abstract>>으로 표현


 * 클래스 간 관계
 1. Association
 2. Inheritance
 3. Realization / Implementation
 4. Dependency
 5. Aggregation
 6. Composition

사진은 https://brownbears.tistory.com/577

 Association  연관
다른 객체의 참조를 가지고 있을 때 사용
변수로 다른 클래스와 연관이 있을 때 사용
 1. A - B
 2. A -> B

 A - B
 1. A가 B를 참조할 수도 있고
 2. B가 A를 참조할 수도 있고
 3. 둘 다 참조이거나
 4. 둘 다 참조가 아니거나
를 의미

 A -> B
A가 B를 참조한다는 의미

 Inheritance  상속
Generalization (일반화)이라고도 많이 함
부모 클래스와 자식 클래스 간의 상속 관계에서 사용

 Realization  실체화
인터페이스를 상속하여
클래스에서 실제 기능을 실현화 할 때 사용
표현 방법이 2개 있음

사진 첨부

 Dependency  의존
클래스간의 참조 관계를 나타낼 때 사용
메소드의 매개변수나 반환에 사용되는 클래스 관계를 나타낼 때 사용

 Aggregation  집합, 집합 연관
Association 관계를 조금 더 특수하게 나타낸 것
전체와 부분의 관계를 가짐
약한 집합
종속적이지 x

 Composition  합성, 복합 연관
Aggregation 집합보다 더 강력한 집합
부분이 전체에 종속적이고
라이프 사이클을 관리한다
마름모가 있는 부분이 전체
화살표가 있는 부분이 부분
이 때 부분의 인스턴스는 공유가 되면 안 된다