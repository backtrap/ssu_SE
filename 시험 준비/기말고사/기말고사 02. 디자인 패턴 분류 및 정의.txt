 * 추상 팩토리  Abstract Factory
구체적인 클래스에 의존하지 않고
서로 연관되거나 의존적인 객체들의 조합을 만드는
인터페이스를 제공

추상 팩토리를 통해 생성된 클레스는
사용자에게 인터페이스를 제공하고
구체적인 구현은 concrete product 클래스에서 이루어짐

동일한 주제의 다른 팩토리를 묶음


 * 빌더  Builder
복잡한 인스턴스를 조립해서 만드는 구조

복합 객체를 생성할 때
객체를 생성한 방법과 객체를 구현하는 방법을 분리함으로써
동일한 생성 절차에서 서로 다른 표현 결과를 만들 수 있음

생성과 표기를 분리해서 복잡한 객체를 생성


 * 팩토리 메소드  Factory Method
상위 클래스에서 객체를 생성하는 인터페이스를 정의하고
하위 클래스에서 인스턴스를 생성하는 방식

상위 클래스는
인스턴스를 만드는 방법만 결정

하위 클래스에서
데이터의 생성을 책임지고 조작하는 함수를 오버로딩

인터페이스와 실제 객체를 생성하는 클래스를 분리

새성할 객체의 클래스를 국한하지 않고
객체 생성

객체 생성 처리를 서브 클래스로 분리해 처리하도록
캡슐화 하는 패턴


 * 프로토타입  Prototype
처음부터 일반적인 원형을 만들어 놓고
그것을 복사한 후 필요한 부분만 수정해서 사용하는 패턴

생성할 객체의 원형을 제공하는 인스턴스에서
생성할 객체들의 타입이 결정되도록 설정

기존 객체를 복제함으로써 객체를 생성


 * 싱글톤  Singleton
클래스에 인스턴스가 하나만 있도록 하면서
이 인스턴스에 대한 전역 접근 지점을 제공하는
생성 디자인 패턴

전역 변수를 사용하지 않고 객체를 하나만 생성해서
생성한 객체를 어디에서든 참조할 수 있도록 하는 디자인 패턴


 * 어댑터  Adapter
기존에 생성된 클래스를 재사용할 수 있도록
중간에서 맞춰주는 역할을 하는 인터페이스를 만드는 패턴

어댑터 형태는
 1. 상속을 이용하는 클래스 패턴
 2. 위임을 이용하는 인스턴스 패턴

호환되지 않는 클래스들을 함께 이용할 수 있도록
타 클래스의 인터페이스를 기존 인터페이스에 덧씌움


 * 브릿지  Bridge
기능의 클래스 계층과 구현의 클래스 계층을 연결하고
구현부에서 추상 계층을 분리하여
추상화된 부분과 실제 구현 부분을 독립적으로 확장할 수 있는 디자인 패턴


 * 컴포지트  Composite
객체들의 관계를 트리 구조로 구성하여
부분-전체 계층을 표현하는 패턴

사용자가 단일 객체와 복합 객체를
모두 동일하게 다루도록 하는 디자인 패턴

여러개의 객체를 묶어
하나의 객체로 이용 ㄱㄴ

여러 개의 객체들로 구성된 복합 객체와 단일 객체를
클라이언트에서 구별 없이 다루게 해주는 패턴


 * 데코레이터  Decorator
기존에 구현되어 있는 클래스에
필요한 기능을 추가해 나가는 설계 패턴

기능 확장이 필요할 때
객체 간의 결합을 통해
기능을 동적으로 유연하게 확장할 수 있게 해주기 때문에
상속의 대안으로 사용된다

개존 객체의 메서드에
새로운 행동을 추가하거나 오버라이드 ㄱㄴ


 * 퍼싸드  Facade
통합된 인터페이스 제공

복잡한 시스템에 대해 단순한 인터페이스를 제공함으로써
사용자의 시스템 간 또는 다른 시스템과의 결합도를 낮춰
시스템 구조에 대한 파악이 쉽게 하는 패턴

오류에 대해서 단위 별로 확인 할 수 있게 해주고
사용자 입장에서 단순한 인터페이스를 제공해 
접근성을 높여주는 디자인 패턴

많은 분량의 코드에 접근할 수 있는
단순한 인터페이스를 제공


 * 플라이웨이트  Flyweight
다수의 객체로 생성될 경우
모두가 갖는 본질적인 요소를 클래스화하여 공유함으로써
메모리를 절약하고
클래스의 경량화를 목적으로 하는 디자인 패턴

여러 개의 가상 인스턴스를 제공해서
메모리 절감


 * 프록시  Proxy
실제 객체에 대한 대리 객체

실제 객체으로의 접근 이전에 필요한 행동을 취할 수 있게 만듬으로써
미리 할당하지 않아도 상관 없는 것들을 실제로 이용할 때 할당하게 하여
메모리 용량을 아낌

실제 객체가 드러나지 않게 하여
정보 은닉의 역할을 수행

접근 조절, 비용 절감, 복잡도 감소를 위해
접근이 힘든 객체에 대한 대역을 제공


 * 커맨드  Command
실행될 기능을 캡슐화함으로써
주어진 여러 기능을 실행 할 수 있는
재사용성이 높은 클래스를 설계

하나의 추상 클래스에 메서드를 만들어 각 명령이 들어오면
그에 맞는 서브 클래스가 선택되어 실행됨

요구사항을 객체로 캡슐화


 * 옵저버  Observer
어떤 클래스에 변화가 일어날 때
이를 감지하여 다른 클래스에 통보해주는 것

한 객체의 상태가 바뀌면
그 객체에 의존하는 다른 객체들에게 연락이 가고
자동으로 내용이 갱신

일대다의 의존성을 가지고 상호작용하는 객체 사이에서
가능한 느슨하게 결합


 * 템플릿 메소드  Templete Method
어떤 작업을 처리하는 일부분을 서브 클래스로 캡슐화해
전체 일을 수행하는 구조는 바꾸지 않으면서
특정 단계에서 수행하는 내용을 바꾸는 패턴

상위 작업의 구조를 바꾸지 않으면서
서브 클래스로 작업의 일부분을 수행

상위 클래스에서는 추상적으로 표현하고
구체적인 내용은 하위 클래스에서 결정되는 디자인 패턴


 * 중재자  Mediator
객체지향 설계에서 객체의 수가 너무 많아 통신이 복잡해지면
느슨한 결합을 해칠 수 있기 때문에 
중간에서 이를 통제하고 지시할 수 있는 역할

중재자에게 요구하여 
통신의 빈도를 줄임

상호작용의 유연한 변경을 지원


 * Interpreter
언어의 다양한 해석

구체적으로 구문을 나누고
그 분리된 구문의 해석을 맡는 클래스를 각각 작성해
여러 형태의 언어 구문을 해석할 수 있게 만드는 패턴

문법 자체를 캡휼화


 * Iterator
컬렉션 구현 방법은 노출시키지 않으면서
그 집합체 안에 들어있는 모든 항목에 접근할 방법을 제공

내부 구조를 노출하지 않고
복합 객체의 원소를 순차적으로 접근 가능


 * State
객체 상태를 캡슐화해서 클래스함으로써
그것을 참고하게 하는 방식

상태에 따라 다르게 처리할 수 있도록 행위 내용을 변경하고
변경시 원시 코드의 수정을 최소화 ㄱㄴ

유지보수의 편의성

객체의 상태에 따라
행위 내용을 변경


 * Visitor
각 클래스의 데이터 구조로부터 
처리 기능을 분리하여 별도의 클래스를 만들어 놓고
해당 클래스의 메서드가 각 클래스를 돌아다니며 특정 작업을 수행

객체의 구조는 변경하지 않으면서
기능만 따로 추가하거나 확장할 때 사용

특정 구조를 이루는 복합 객체의 원소 특성에 따라
동작을 수행할 수 있도록 지원


 * 전략  Strategy
알고리즘 군을 정의하고
같은 알고리즘을 각각 하나의 클래스로 캡슐화한 후
필요할 때 서로 교환해서 사용할 수 있게 하는 패턴

행위 클래스로 캡슐화해
동적으로 행위를 자유롭게 바꿀 수 있게 하는 패턴


 * Memento
클래스 설계 관점에서
객체의 정보를 저장할 필요가 있을 때 적용하는 디자인 패턴

Undo 기능을 개발할 때 사용
Undo는 작업 취소 기능

객체를 이전 상태로 복구시켜야 하는 경우
Undo (작업 취소) 요청 기능


 * Chain of Responsibility
어떤 기능에 대한 처리의 연결이 정적으로 하드코딩 되어있을 때
기능 처리의 연결 변경이 불가능하므로
이를 동적으로 연결한 경우에는 다르게 처리할 수 있도록 하는 디자인 패턴

한 요청을 2개 이상의 객체에서 처리
